import * as sinon from 'sinon'
import { OrderCalcService } from './orderCalc.service'

describe('SERVICE Calc order', () => {
  let clock: sinon.SinonFakeTimers

  beforeEach(() => {
    const desiredTime = new Date('2023-05-15T15:00:00') // –ü–æ–Ω–µ–¥—ñ–ª–æ–∫
    clock = sinon.useFakeTimers(desiredTime.getTime())
  })

  afterEach(() => {
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ç–∞–π–º–µ—Ä–∏ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
    clock.restore()
  })

  test('EN Order in the middle of the day', () => {
    const orderCalcService = new OrderCalcService({
      length: 200,
      language: '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞',
      service: '–ü–µ—Ä–µ–∫–ª–∞–¥',
    })

    const { deadline, price, deadlineDate, time } = orderCalcService.getOrderData()
    expect(deadline).toBe(5762163)
    expect(price).toBe(120)
    expect(deadlineDate).toBe('15 —Ç—Ä–∞–≤–Ω—è, 16:36')
    expect(time).toBe('1 –≥–æ–¥–∏–Ω 36 —Ö–≤–∏–ª–∏–Ω')
  })

  test('UK Order in the middle of the day', () => {
    const orderCalcService = new OrderCalcService({
      length: 2000,
      language: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
      service: '–ü–µ—Ä–µ–∫–ª–∞–¥',
    })

    const { deadline, price, deadlineDate, time } = orderCalcService.getOrderData()
    expect(deadline).toBe(9001351)
    expect(price).toBe(100)
    expect(deadlineDate).toBe('15 —Ç—Ä–∞–≤–Ω—è, 17:30')
    expect(time).toBe('2 –≥–æ–¥–∏–Ω 30 —Ö–≤–∏–ª–∏–Ω')
  })

  test('UK End order for', () => {
    const orderCalcService = new OrderCalcService({
      length: 1000 * 4,
      language: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
      service: '–ü–µ—Ä–µ–∫–ª–∞–¥',
    })

    const { deadline, price, deadlineDate, time } = orderCalcService.getOrderData()
    console.log('üöÄ  orderCalcService.getOrderData():', orderCalcService.getOrderData())
    expect(deadline).toBe(24989348)
    expect(price).toBe(396)
    expect(deadlineDate).toBe('15 —Ç—Ä–∞–≤–Ω—è, 15:30')
    expect(time).toBe('6 –≥–æ–¥–∏–Ω 56 —Ö–≤–∏–ª–∏–Ω')
  })
})
